pipeline {
    agent any
    parameters {
        string(name: 'DOCKER_TAG', description: 'Tag de la imagen Docker', defaultValue: 'latest')
    }
    environment {
        DOCKER_USER_CRED = credentials('alex-joaquin-dockerhub')
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    def scannerHome = tool 'sonarqube_5.0'
                    withSonarQubeEnv(installationName: 'aroldev sonarqube') {
                        sh "${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=alex-project-kubecamp-go -Dsonar.sources=./services/go-auth -Dsonar.exclusions=**/*_test.go -Dsonar.tests=./services/go-auth -Dsonar.test.inclusions=**/*_test.go"
                    }
                }
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    // Iniciar el contenedor de prueba
                    def testContainer = docker.image('golang:1.14.2').run('-d -p 8080:8080 -v /var/run/docker.sock:/var/run/docker.sock')
                    // Copiar el c√≥digo fuente al contenedor de prueba
                    sh "docker cp . ${testContainer.id}:/go/src/github.com/alex-joaquin/alex-project-kubecamp/services/go-auth"
                    // Ejecutar los tests
                    sh "docker exec ${testContainer.id} go test -v ./..."
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    def dockerTag = params.DOCKER_TAG
                    def dockerfile = 'services/go-auth/Dockerfile'
                    sh "docker build -t aalleexx98/alex-project-kubecamp-go:$dockerTag -f $dockerfile ."
                    // Mirar lo del dir.
                }
            }
        }

        stage('Loggin in docker hub'){
            steps {
                sh "docker login -u $DOCKER_USER_CRED_USR -p $DOCKER_USER_CRED_PSW"
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    def dockerTag = params.DOCKER_TAG
                    sh "docker push aalleexx98/alex-project-kubecamp-go:$dockerTag"
                }
            }
        }

        stage('Cleanup') {
            steps {
                script {
                    // Detener y eliminar el contenedor de prueba
                    testContainer.stop()
                    testContainer.remove()
                }
            }
        }
     }
}