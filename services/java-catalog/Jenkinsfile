pipeline {
    agent any
    parameters {
        string(name: 'DOCKER_TAG', description: 'Tag de la imagen Docker', defaultValue: 'latest')
    }
    environment {
        DOCKER_USER_CRED = credentials('alex-joaquin-dockerhub')
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    def scannerHome = tool 'sonarqube_5.0'
                    withSonarQubeEnv(installationName: 'aroldev sonarqube') {
                        sh "${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=alex-project-kubecamp-java -Dsonar.sources=./services/java-catalog -Dsonar.exclusions=**/*Test.java -Dsonar.tests=./services/java-catalog -Dsonar.test.inclusions=**/*Test.java -Dsonar.java.binaries=."
                    }
                }
            }
        }

        stage('Testing') {
            steps {
                dir('services/java-catalog/.docker'){
                    script {
                        def dockerfile = 'Dockerfile'
                        sh "docker build -t java-test-image -f $dockerfile ."
                        sh "docker run java-test-image ./gradlew test"
                    }
                }
            }
            // agent {
            //     docker {
            //         image 'gradle:8.2-jdk17'
            //         reuseNode true
            //     }
            // }
            // steps {
            //     sh './gradlew test'
            //     //Probar de hacer como el de go
            // }
        }
    }
}